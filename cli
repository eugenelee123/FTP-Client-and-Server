import socket
import os
import sys
from functools import partial

if (len(sys.argv) < 3):
    print("USAGE python " + sys.argv[0] + " <server machine> <server port>")
    exit()

#Need to use DNS to do an IP look up if an IP is not specified
machine = sys.argv[1]
port = int(sys.argv[2])

# print("Machine: ", machine)
# print("Port: ", port)

#AF_INET refers to ipv4, SOCK_STREAM specifies TCP connection
connSock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
try:
    connSock.connect((machine,port))
except socket.error as e:
    print("Connection failed. Reason: ", e)
    sys.exit()

option = ""

def get(socket,option):
    # Tell the server we are using the get function
    try:
        socket.send(option.encode())
    except Exception as e:
        print("Error",e)
        return

    # Receive the file size
    try:
        counter = socket.recv(64).decode()
    except Exception as e:
        print("Error",e)

    # Allow the server to continue
    socket.send('go ahead'.encode())

    # Receive and display the file by chunks
    print("Message received:")
    print(counter, " chunks")
    for i in range(int(counter)):
        print(socket.recv(64))


def put(socket,option):
  # Signal to the server that we are using the put function
  socket.send(option.encode())

  # Wait for server to get ready to continue
  socket.recv(1024).decode()

  option = option.split(" ",1)
  fileName = option[1]
  fileObj = open(fileName, "rb")

  # Find file size
  counter = 0
  for chunk in iter(partial(fileObj.read, 64), b''):
      counter += 1

  # Send file size to server
  socket.send(str(counter).encode())
  fileObj.close()

  # Wait for server to get ready
  socket.recv(1024).decode()

  # Send file info in chunks
  fileObj = open(fileName, "rb")
  for chunk in iter(partial(fileObj.read, 64), b''):
      socket.send(chunk)
  fileObj.close()

def ls(socket):
    try:
        socket.send("ls".encode())
    except Exception as e:
        print("Error: ",e)
        return

    try:
        numFiles = socket.recv(1024).decode()
        numFiles = int(numFiles[0])
        print("Number of Files in Directory:",numFiles)
    except Exception as e:
        print(e)
        return

    try:
        fileData = socket.recv(1024)
        fileData = str(fileData).split("%>%")
        for i in range(numFiles):
            print(fileData[i])

    except Exception as e:
        print(e)
        return

    # fileName = socket.recv(fileSize)
    # print(fileName)


# If we have time, let's implement error checking
while(option != "quit"):

    option = input("ftp> ")

    if("get" in option):
        get(connSock,option)

    if("put" in option):
        put(connSock, option)

    if("ls" in option):

        ls(connSock)

connSock.close()
